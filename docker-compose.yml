version: '3.7'

services:
  web:
    build: ./app
    env_file:
      - .env.dev
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    volumes:
      - ./app/:/usr/src/app/
    depends_on:
      - db
      - redis
      - celery

  tests:
    # All tests here YET.
    build: ./app
    env_file:
      - .env.dev
    command: >
      sh -c "pytest -s --showlocals"
    ports:
      - 5555:8000
    volumes:
      - ./app/:/usr/src/app/
    environment:
      # - DB_HOST=db  # POSTGRES_HOST from .env
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
    depends_on:
      - db
      - redis
      - celery

  db:
    image: postgres:12.0-alpine
    # Тут можно билдить через кастомный докер-файл,
    # например context: app/Docker dockerfile: db.Dockerfile
    # если нужно - добавить .sh скрипт

    env_file:
      - .env.dev
    # restart? untill stopped?
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    ports:
      [5433:5432]
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine

  celery:
    build: ./app
    restart: always
    env_file:
      - .env.dev
    command: celery -A SUPPORT_API worker --loglevel=INFO
    volumes:
      - ./app:/app
    environment:
      - DB_HOST=db
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
    depends_on:
      - db
      - redis

volumes:
  postgres_volume:
